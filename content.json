{"meta":{"title":"遇见","subtitle":"How can you give up without trying","description":"犹豫就会败北，果断就会白给！","author":"小金","url":"https://orignn.github.io","root":"/"},"pages":[{"title":"404","text":"","path":"404/index.html","date":"12-30","excerpt":""},{"title":"关于我","text":"没啥好说的","path":"about/index.html","date":"01-03","excerpt":""},{"title":"文章分类","text":"","path":"categories/index.html","date":"01-03","excerpt":""},{"title":"这是一个不正经的留言板","text":"因为本人也不知道这个留言板的作用！","path":"message/index.html","date":"01-03","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"12-30","excerpt":""},{"title":"标签目录","text":"","path":"tags/index.html","date":"01-03","excerpt":""}],"posts":[{"title":"Linux防火墙相关指令","text":"CentOS7打开关闭防火墙与端口的基本命令firewalld的基本使用 启动： systemctl start firewalld 关闭： systemctl stop firewalld 查看状态： systemctl status firewalld 开机禁用 ： systemctl disable firewalld 开机启用 ： systemctl enable firewalld systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。 启动一个服务：systemctl start firewalld.service 关闭一个服务：systemctl stop firewalld.service 重启一个服务：systemctl restart firewalld.service 显示一个服务的状态：systemctl status firewalld.service 在开机时启用一个服务：systemctl enable firewalld.service 在开机时禁用一个服务：systemctl disable firewalld.service 查看服务是否开机启动：systemctl is-enabled firewalld.service 查看已启动的服务列表：systemctl list-unit-files|grep enabled 查看启动失败的服务列表：systemctl –failed 配置firewalld-cmd 查看版本： firewall-cmd –version 查看帮助： firewall-cmd –help 显示状态： firewall-cmd –state 查看所有打开的端口： firewall-cmd –zone=public –list-ports 更新防火墙规则： firewall-cmd –reload 查看区域信息: firewall-cmd –get-active-zones 查看指定接口所属区域： firewall-cmd –get-zone-of-interface=eth0 拒绝所有包：firewall-cmd –panic-on 取消拒绝状态： firewall-cmd –panic-off 查看是否拒绝： firewall-cmd –query-panic 添加端口 firewall-cmd –zone=public –add-port=80/tcp –permanent （–permanent永久生效，没有此参数重启后失效） 重新载入 firewall-cmd –reload 查看 firewall-cmd –zone= public –query-port=80/tcp 删除 firewall-cmd –zone= public –remove-port=80/tcp –permanent","path":"2020/df034ce8.html","date":"01-03","excerpt":"","tags":[{"name":"防火墙","slug":"防火墙","permalink":"https://orignn.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"Linux","slug":"Linux","permalink":"https://orignn.github.io/tags/Linux/"}]},{"title":"BBR与锐速","text":"破解版锐速12345678910111213141516171819202122232425262728293031# 安装破解版锐速锐速对内核有要求，如果安装不上就更换内核锐速破解版功能： 1.如果内核完全匹配就会自动下载安装。 2.如果没有完全匹配的内核，会在界面提示可选内核，可以手动选个最接近的尝试 3.自动下载授权文件 4.自动修改配置文件wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh# 卸载命令chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f# 常用命令# 启动 service serverSpeeder start# 停止 service serverSpeeder stop# 重新加载配置 service serverSpeeder reload# 重启 service serverSpeeder restart# 状态 service serverSpeeder status# 统计 service serverSpeeder stats# 更新许可文件 service serverSpeeder renewLic# 更新 service serverSpeeder updateCentos 6更换内核：# CentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64# uname -r # 查看当前内核版本# rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm# rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm --force# rpm -qa | grep kernel #查看内核是否安装成功。如果显示你安装的内核版本，表示安装成功# reboot #重启Centos 7更换内核：# rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-3.10.0-229.1.2.el7.x86_64.rpm --force# rpm -qa | grep kernel #查看内核是否安装成功# reboot #重启 配置锐速（ServerSpeeder） ServerSpeeder 打开配置文件： vi /serverspeeder/etc/config # vi 打开配置文件后，按 I键 进入编辑模式(注意左下角)，然后根据以下说明编辑配置文件，最后按 ESC键 退出编辑模式并输入 :wq 保存并退出。 1234567891011# 可用示例模板acc=\"1\"advacc=\"1\"advinacc=\"1\"wankbps=\"1000000\"waninkbps=\"1000000\"# 这两个参数代表加速宽带为 1Gbps，再加个 0 就是10Gbps了shaperEnable=\"1\"maxmode=\"1\"initialCwndWan=\"44\"# 这个参数请根据回程延迟修改 initialCwndWan参数请根据你与VPS的连接延迟(回程，VPS连接你的延迟)，比如 110ms，那么 110/2.5=44，即值为 44 ，自己根据延迟调整。 修改配置文件后需要重启锐速才能生效： ServerSpeeder：/serverspeeder/bin/serverSpeeder.sh restart Google BBR安装Google](https://www.centos.bz/tag/google/) 开源了其 TCP BBR 拥塞控制算法，并提交到了 Linux 内核，从 4.9 开始，Linux 内核已经用上了该算法。根据以往的传统，Google 总是先在自家的生产环境上线运用后，才会将代码开源，此次也不例外。根据实地测试，在部署了最新版内核并开启了 TCP BBR 的机器上，网速甚至可以提升好几个数量级。 安装CentOS 7.31、yum系统更新（更新到CentOS 7.3） 1yum update 2、查看系统版本 1cat &#x2F;etc&#x2F;redhat-release 输出如下（release数值大于7.3即可），则表示已升级到7.3 1CentOS Linux release 7.3.1611 (Core) 3、安装elrepo并升级内核 123rpm --import https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.orgrpm -Uvh http:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-2.el7.elrepo.noarch.rpmyum --enablerepo&#x3D;elrepo-kernel install kernel-ml -y 正常情况下将输出如下信息： 1234567891011121314151617Transaction Summary&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Install 1 PackageTotal download size: 39 MInstalled size: 169 MDownloading packages:kernel-ml-4.9.0-1.el7.elrepo.x86_64.rpm | 39 MB 00:00Running transaction checkRunning transaction testTransaction test succeededRunning transactionWarning: RPMDB altered outside of yum. Installing : kernel-ml-4.9.0-1.el7.elrepo.x86_64 1&#x2F;1 Verifying : kernel-ml-4.9.0-1.el7.elrepo.x86_64 1&#x2F;1Installed: kernel-ml.x86_64 0:4.9.0-1.el7.elrepoComplete! 4、更新grub文件并重启（reboot后，ssh会断开，稍等一会儿重新连接） 123egrep ^menuentry &#x2F;etc&#x2F;grub2.cfg | cut -f 2 -d \\&#39;grub2-set-default 0reboot 5、开机后查看内核是否已更换为4.9 1uname -r 输出如下内容则表示内核4.9已经启动了（数值大于4.9即可） 14.9.0-1.el7.elrepo.x86_64 CentOS 7.4导入 elrepo 软件源的 GPG 公钥 1rpm --import https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.org 导入 elrepo 软件源 说明：该地址可以自动下载该源的最新的软件列表，无需修改地址。 1rpm -Uvh http:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-3.el7.elrepo.noarch.rpm 下载并安装新的内核 启用软件源并下载安装最新稳定版内核 1yum -y --enablerepo&#x3D;elrepo-kernel install kernel-ml 设定 Grub 默认启动新内核 说明：如果手动修改过 Grub 的配置文件，以下命令可能无法执行成功。请自行修改 Grub 配置文件。 1grub2-set-default 0 使用新的内核重启 1reboot 检查设置 &amp; 删除旧的内核 查看当前系统的内核版本号 1uname -r 如果输出是 4.10 以上的版本，说明安装成功。 14.14.13-1.el7.elrepo.x86_64 删除旧内核 说明：删除旧内核的目的是为了防止 yum 更新旧版内核之后覆盖了 grub 默认启动项 1yum -y remove kernel kernel-tools 开启bbr1vim &#x2F;etc&#x2F;sysctl.conf 添加如下内容 12net.core.default_qdisc &#x3D; fqnet.ipv4.tcp_congestion_control &#x3D; bbr 加载系统参数（正常情况下会输出我们之前加入的内容） 1sysctl -p 验证bbr是否已经开启 a.若 1sysctl net.ipv4.tcp_available_congestion_control 返回 1net.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno 则成功 b.若 1lsmod | grep bbr 返回形如如下形式的信息即成功。 12tcp_bbr 16384 1tcp_bbr 20480 0 BBR关闭加速说明：网上的Google BBR教程都只提到了安装/开启方法，并没有说关闭/卸载方法，相信有人会想关闭它！这里就说个简单的关闭BBR的方法。 方法1、使用root用户登录，运行以下命令： 1vim &#x2F;etc&#x2F;sysctl.conf 2、删除或注释掉其中的两行： 12#net.core.default_qdisc &#x3D; fq 用#注释掉#net.ipv4.tcp_congestion_control &#x3D; bbr 用#注释掉 3、执行命令： 1sysctl -p 最后重启服务器生效！","path":"2020/7b25428e.html","date":"01-03","excerpt":"","tags":[{"name":"酸酸乳","slug":"酸酸乳","permalink":"https://orignn.github.io/tags/%E9%85%B8%E9%85%B8%E4%B9%B3/"}]},{"title":"centos7安装网络限速工具","text":"下载 wondershaper12# cd /usr/local/# git clone https://github.com/magnific0/wondershaper.git wondershaper 使用123456789101112131415161718192021222324// 单位是 Kbps./wondershaper -a 网口名称 -u 上传速度 -d 下载速度// 限制 eth0 网口上传下载为 102400 Kbps 100Mbps./wondershaper -a eth0 -u 102400 -d 102400// 可以看到多了一个 ifb0 网口# ip addr show1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP qlen 1000 link/ether 00:16:3e:0e:48:a7 brd ff:ff:ff:ff:ff:ff inet 10.3.200.99/22 brd 10.3.203.255 scope global dynamic eth0 valid_lft 304404587sec preferred_lft 304404587sec3: ifb0: &lt;BROADCAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 32 link/ether 96:3a:32:74:1e:01 brd ff:ff:ff:ff:ff:ff// 查看限速状态./wondershaper -a eth0 -s//取消限速./wondershaper -a eth0 -c KBps与Mbps的区别如下 ： 1.两者表示的物理意义不同，KBps用来表示带宽，Mbps用来表示网速。 2.两者的数值不同，1Mbps=128KBps。 3.两者的单位不同，KBps是千比特每秒，Mbps是兆位每秒。 安装speedtest测速工具从github克隆包到本地 1# git clone https://github.com/sivel/speedtest-cli.git 2.执行speedtest这个python脚本 12cd ~&#x2F;speedtest-clipython speedtest.py","path":"2020/c9385dba.html","date":"01-03","excerpt":"","tags":[{"name":"酸酸乳","slug":"酸酸乳","permalink":"https://orignn.github.io/tags/%E9%85%B8%E9%85%B8%E4%B9%B3/"}]},{"title":"酸酸乳config参数","text":"酸酸乳user-config.json参数内容各选项说明（注意，你应该修改使用initcfg.sh脚本初始化后的user-config.json）： Name Explanation 中文说明 server the address your server listens 监听地址 server_ipv6 the ipv6 address your server listens ipv6地址 server_port server port 监听端口 local_address the address your local listens 本地地址 local_port local port 本地端口 password password used for encryption 密码 timeout in seconds 超时时间 udp_timeout in seconds UDP链超时时间 udp_cache cache size UDP链缓冲区大小 method default: “aes-256-cfb”, see Encryption 加密方式 protocol default：”origin” 协议插件，默认”origin” protocol_param default：”” 协议插件参数，默认”” obfs default：”tls1.2_ticket_auth_compatible” 混淆插件，默认”tls1.2_ticket_auth_compatible” obfs_param default：”” 混淆插件参数，默认”” redirect default：”” 重定向参数，默认”” dns_ipv6 default:false 是否优先使用IPv6地址，有IPv6时可开启 fast_open use TCP_FASTOPEN, true / false 快速打开(仅限linux客户端) workers number of workers, available on Unix/Linux 线程（仅限linux客户端） verbose display verbose debug info 显示调试信息 connect_verbose_info display connection verbose info 显示连接信息 forbidden_ip forbidden IP set for outbound 阻止连接到此IP列表 forbidden_port forbidden port set for outbound 阻止连接到此端口列表 ignore_bind not bind the IP set 不绑定的IP列表 out_bind force bind this IPv4 IP 强制绑定此IPv4地址 out_bindv6 force bind this IPv6 IP 强制绑定此IPv6地址 additional_ports additional ports for multiuser mode 多用户模式下配置额外端口 speed_limit_per_con rate limit for each connection 单连接限速，单位KB speed_limit_per_user rate limit for each user 单用户限速，单位KB redirect参数说明： 值为空字符串或一个列表，若为列表示例如 1\"redirect\":[\"bing.com\", \"cloudflare.com:443\"], 作用是在连接方的数据不正确的时候，把数据重定向到列表中的其中一个地址和端口（不写端口则 视为80），以伪装为目标服务器。 dns_ipv6参数说明： 为true则指定服务器优先使用IPv6地址。仅当服务器能访问IPv6地址时可以用，否则会导致有IPv6地 址的网站无法打开。 一般情况下，只需要修改以下五项即可： 12345\"server_port\":8388, //端口\"password\":\"password\", //密码\"protocol\":\"origin\", //协议插件\"obfs\":\"http_simple\", //混淆插件\"method\":\"aes-256-cfb\", //加密方式 多端口配置1234567891011121314151617181920&#123; \"server\":\"0.0.0.0\", \"server_ipv6\": \"[::]\", \"local_address\":\"127.0.0.1\", \"local_port\":1080, \"port_password\":&#123; \"80\":\"password1\", \"443\":\"password2\" &#125;, \"timeout\":300, \"method\":\"aes-256-cfb\", \"protocol\": \"auth_sha1_compatible\", \"protocol_param\": \"\", \"obfs\": \"http_simple_compatible\", \"obfs_param\": \"\", \"redirect\": \"\", \"dns_ipv6\": false, \"fast_open\": false, \"workers\": 1&#125; 按照格式修改端口和密码： 1234\"port_password\":&#123; \"80\":\"password1\", //端口和密码1 \"443\":\"password2\" //端口和密码2&#125;, 如果要为每个端口配置不同的混淆协议，请写入以下配置： 1234567891011121314151617181920&#123; \"server\":\"0.0.0.0\", \"server_ipv6\":\"::\", \"local_address\":\"127.0.0.1\", \"local_port\":1080, \"port_password\":&#123; \"8388\":&#123;\"protocol\":\"auth_simple\", \"password\":\"abcde\", \"obfs\":\"http_simple\", \"obfs_param\":\"\"&#125;, \"8389\":&#123;\"protocol\":\"origin\", \"password\":\"abcde\"&#125; &#125;, \"timeout\":300, \"method\":\"aes-256-cfb\", \"protocol\": \"auth_sha1_compatible\", \"protocol_param\": \"\", \"obfs\": \"http_simple_compatible\", \"obfs_param\": \"\", \"redirect\": \"\", \"dns_ipv6\": false, \"fast_open\": false, \"workers\": 1&#125; 按格式修改端口、密码以及混淆协议。也可以和以前的格式混合使用，如果某个端口不配置混淆协 议，则会使用下面的默认”obfs”配置。","path":"2020/d276cfd9.html","date":"01-03","excerpt":"","tags":[{"name":"酸酸乳","slug":"酸酸乳","permalink":"https://orignn.github.io/tags/%E9%85%B8%E9%85%B8%E4%B9%B3/"}]},{"title":"搭建酸酸乳","text":"酸酸乳 服务端搭建安装基本库centos： 1yum install git ubuntu/debian： 1apt-get install git 拉取酸酸乳源码1git clone -b manyuser https:&#x2F;&#x2F;github.com&#x2F;shadowsocksr-backup&#x2F;shadowsocksr.git 执行完毕后此目录会新建一个shadowsocksr目录，其中根目录的是多用户版，子目录中的是单用户版(即shadowsocksr/shadowsocks)。 服务端配置进入根目录初始化配置 12cd ~/shadowsocksrbash initcfg.sh 之后进入子目录： 1cd ~&#x2F;shadowsocksr&#x2F;shadowsocks 快速运行 123python server.py -p 443 -k password -m aes-256-cfb -O auth_sha1_v4 -o http_simple#说明：-p 端口 -k 密码 -m 加密方式 -O 协议插件 -o 混淆插件 后台运行：(加上 -d 参数) 1python server.py -p 443 -k password -m aes-256-cfb -O auth_sha1_v4 -o http_simple -d start 如果要停止/重启： 1python server.py -d stop&#x2F;restart 查看日志： 1tail -f &#x2F;var&#x2F;log&#x2F;shadowsocksr.log 用 -h 查看所有参数 使用配置文件运行 如果你的ss目录是~/shadowsocksr，进入这里 修改user-config.json中的server_port，password等字段 运行子目录内的server.py： 1python server.py 如果要在后台运行： 1python server.py -d start 如果要停止/重启： 1python server.py -d stop&#x2F;restart 查看日志： 1tail -f &#x2F;var&#x2F;log&#x2F;shadowsocksr.log","path":"2020/eab1798a.html","date":"01-03","excerpt":"","tags":[{"name":"酸酸乳","slug":"酸酸乳","permalink":"https://orignn.github.io/tags/%E9%85%B8%E9%85%B8%E4%B9%B3/"}]},{"title":"Hexo常用操作","text":"常用操作 ​ 1. 创建文章 1hexo new [layout] &lt;文章名字&gt; 参数： ​ - [layout]参数 参数名 功能 文章路径 post 新建文章 source/_posts page 新建页面 source draft 新建草稿 source/_draft ​ ​ 2. 生成静态页面 1hexo g ​ 部署上去的时候都需要先编译一下，编译后会出现一个public文件夹，将所有的md文件编译成html文件 ​ 3. 开启本地服务 1hexo s ​ 开启本地hexo服务，默认地址为:localhost:4000 ​ 4. 清除public 1hexo clean ​ 当source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译 ​ 5. 部署到Github 1hexo d -g ​ 使用编辑器编辑好文章之后就可以使用该命令进行部署","path":"2019/56ed2c1c.html","date":"08-30","excerpt":"","tags":[{"name":"hexo","slug":"hexo","permalink":"https://orignn.github.io/tags/hexo/"}],"preview":"/imgs/preview/27.jpg"},{"title":"Typora一些快捷键","text":"Typora快捷键 快捷键名称 快捷键 无序列表 输入-之后输入空格 有序列表 输入数字+“.”之后输入空格 任务列表 -[空格]空格 文字 标题 Ctrl+数字 表格 Ctrl+T 生成目录 按回车 选中一整行 Ctrl+L 选中单词 Ctrl+D 选中相同格式的文字 Ctrl+E 跳转到文章开头 Ctrl+Home 跳转到文章结尾 Ctrl+End 搜索 Ctrl+F 替换 Ctrl+H 引用 输入&gt;之后输入空格 代码块 Ctrl+Shift+K 插入图片 直接拖动到指定位置即可或者Ctrl+Shift+I 删除线 Alt+Shift+5 加粗 Ctrl+B 倾斜 Ctrl+I 下划线 Ctrl+U 插入链接 Ctrl+K 分割线 输入***或 — 再按回车","path":"2019/d697ddf5.html","date":"08-30","excerpt":"","tags":[{"name":"Typora","slug":"Typora","permalink":"https://orignn.github.io/tags/Typora/"}],"preview":"/imgs/preview/preview2.jpg"},{"title":"示例文章","text":"示例文章","path":"2019/6842f00a.html","date":"08-02","excerpt":"","tags":[{"name":"示例","slug":"示例","permalink":"https://orignn.github.io/tags/%E7%A4%BA%E4%BE%8B/"}],"preview":"/imgs/preview/preview3.jpg"}]}